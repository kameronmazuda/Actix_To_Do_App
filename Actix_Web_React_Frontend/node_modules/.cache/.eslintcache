[{"/home/kamron/projects/Actix_To_Do_App/Actix_Web_React_Frontend/src/index.js":"1","/home/kamron/projects/Actix_To_Do_App/Actix_Web_React_Frontend/src/App.js":"2","/home/kamron/projects/Actix_To_Do_App/Actix_Web_React_Frontend/src/components/ToDoItem.jsx":"3","/home/kamron/projects/Actix_To_Do_App/Actix_Web_React_Frontend/src/components/CreateToDo.jsx":"4"},{"size":255,"mtime":1697444482589,"results":"5","hashOfConfig":"6"},{"size":2459,"mtime":1697455347729,"results":"7","hashOfConfig":"6"},{"size":662,"mtime":1697454430937,"results":"8","hashOfConfig":"6"},{"size":869,"mtime":1697792850462,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"abwrjc",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/kamron/projects/Actix_To_Do_App/Actix_Web_React_Frontend/src/index.js",[],[],"/home/kamron/projects/Actix_To_Do_App/Actix_Web_React_Frontend/src/App.js",["24","25","26"],[],"import \"./App.css\"\n\nimport {useEffect, useState} from \"react\";\nimport axios from \"axios\";\n\nimport ToDoItem from \"./components/ToDoItem\";\nimport CreateToDo from \"./components/CreateToDo\";\n\nfunction App() {\n\tlet [message, setMessage] = useState(\"To Do App\");\n\tlet [pendingItems, setPendingItems] = useState([]);\n\tlet [doneItems, setDoneItems] = useState([]);\n\tlet [pendingItemsCount, setPendingItemsCount] = useState(0);\n\tlet [doneItemsCount, setDoneItemsCount] = useState(0);\n\t\n\t\n\tconst processItemValues = (items) => {\n\t\tlet itemList = [];\n\t\titems?.forEach((item, i) => {\n\t\t\titemList.push(\n\t\t\t\t<ToDoItem \n\t\t\t\t\tkey={i}\n\t\t\t\t\ttitle={item.title}\n\t\t\t\t\tstatus={item.status}\n\t\t\t\t\tpassBackResponse={\n\t\t\t\t\t\thandleReturnedState\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t)\n\t\t})\n\t\treturn itemList;\n\t}\n\t\n\tconst handleReturnedState = (res) => {\n\t\tlet pending_items = res.data[\"pending_items\"];\n\t\tlet done_items = res.data[\"done_items\"];\n\t\tsetPendingItems(processItemValues(pending_items));\n\t\tsetDoneItems(processItemValues(done_items));\n\t\tsetDoneItemsCount(res.data[\"done_items_count\"])\n\t\tsetPendingItemsCount(res.data[\"pending_items_count\"])\n\t\tconsole.log(\"new state\", res.data)\n\t}\n\t\n\t\n\tuseEffect(() => {\n\t\taxios.get(\"http://127.0.0.1:8080/v1/item/get\", {\n\t\t\theaders: {\n\t\t\t\t\"token\": \"some_token\"\n\t\t\t}\n\t\t}).then(res => {\n\t\t\t\tlet pending_items = res.data[\"pending_items\"];\n\t\t\t\tlet done_items = res.data[\"done_items\"];\n\t\t\t\tsetPendingItems(processItemValues(pending_items));\n\t\t\t\tsetDoneItems(processItemValues(done_items));\n\t\t\t\tsetDoneItemsCount(res.data[\"done_item_count\"]);\n\t\t\t\tsetPendingItemsCount(res.data[\"pending_item_count\"]);\n\t\tconsole.log(\"old state\", res.data)\n\t\t\t}\n\t\t)\n\t}, [])\n\n\t\n  return (\n\t<div className=\"App\">\n\t\t<div className=\"mainContainer\">\n\t\t\t<div className=\"header\">\n\t\t\t\t<div className=\"tasksNumContainer\">\n\t\t\t\t\tComplete tasks: \n\t\t\t\t\t<span id=\"completeNum\">{doneItemsCount}</span>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"tasksNumContainer\">\n\t\t\t\tPending tasks: <span id=\"pendingNum\">{pendingItemsCount}</span></div>\n\t\t\t</div>\n\t\t\t<div className=\"items\">\n\t\t\t\t<h3 className=\"items_title\">Pending Tasks</h3>\n\t\t\t\t{pendingItems.map((item, i) => (\n\t\t\t\t<div key={i}>\n\t\t\t\t\t\t{item}\n\t\t\t\t</div>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t\t<div className=\"items\">\n\t\t\t\t<h3 className=\"items_title\">Done Tasks</h3>\n\t\t\t\t{doneItems.map((item, i) => (\n\t\t\t\t\t<div key={i}>\n\t\t\t\t\t\t{item}\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t<div>\n\t\t\t<CreateToDo passBackResponse={handleReturnedState} />\n\t\t</div>\n\t\t</div>\n\t</div>\n  );\n}\n\nexport default App;\n","/home/kamron/projects/Actix_To_Do_App/Actix_Web_React_Frontend/src/components/ToDoItem.jsx",["27"],[],"import axios from \"axios\";\nimport {useState} from \"react\";\n\nfunction ToDoItem({title, status, passBackResponse}) {\n\n\tconst button = status === \"PENDING\" ? \"edit\" : \"delete\" \n\tconst sendRequest = () => {\n\t\taxios\n\t\t\t.post(\"http://127.0.0.1:8080/v1/item/\" + button, \n\t\t\t{\n\t\t\t\t\"title\": title,\n\t\t\t\t\"status\": status === \"PENDING\" ? \"DONE\" : \"PENDING\",\n\t\t\t}, \n\t\t\t{\n\t\t\t\theaders: \n\t\t\t\t{\n\t\t\t\t\t\"token\": \"some_token\"\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(res => passBackResponse(res));\n\t}\n\t\n\treturn (\n\t\t<div className=\"itemContainer\">\n\t\t\t<p>{title}</p>\n\t\t\t<button \n\t\t\t\tclassName=\"actionButton\"\n\t\t\t\tonClick={sendRequest}\n\t\t\t>\n\t\t\t\t{button}\n\t\t\t</button>\n\t\t</div>\n\t)\n}\n\nexport default ToDoItem;\n","/home/kamron/projects/Actix_To_Do_App/Actix_Web_React_Frontend/src/components/CreateToDo.jsx",[],[],{"ruleId":"28","severity":1,"message":"29","line":10,"column":7,"nodeType":"30","messageId":"31","endLine":10,"endColumn":14},{"ruleId":"28","severity":1,"message":"32","line":10,"column":16,"nodeType":"30","messageId":"31","endLine":10,"endColumn":26},{"ruleId":"33","severity":1,"message":"34","line":60,"column":5,"nodeType":"35","endLine":60,"endColumn":7,"suggestions":"36"},{"ruleId":"28","severity":1,"message":"37","line":2,"column":9,"nodeType":"30","messageId":"31","endLine":2,"endColumn":17},"no-unused-vars","'message' is assigned a value but never used.","Identifier","unusedVar","'setMessage' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'processItemValues'. Either include it or remove the dependency array.","ArrayExpression",["38"],"'useState' is defined but never used.",{"desc":"39","fix":"40"},"Update the dependencies array to be: [processItemValues]",{"range":"41","text":"42"},[1642,1644],"[processItemValues]"]